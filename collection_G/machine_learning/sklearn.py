"""
Functions around machine learning

for sklearn
"""

# scikit-learn must be installed
try:
    import sklearn
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import OneHotEncoder
    import numpy as np
except:
    sklearn = None

try:
    import seaborn as sns
    import pandas as pd
except:
    sns = None

from ._exception import *

def split_data(
    X,
    y,
    validation=True,
    random_state=None,
    val_random_state=None,
    test_size=0.2,
    val_size=0.2
):
    """
    splits data, using 'train_test_split'

    arguments
        X : array
            The data.
        y : array
            The true labels.
        validation : bool (default : True)
            If true, the training data will be split into
            training data, and validation data
        random_state : any (default : None)
            The seed of the random state used in 'train_test_split'
        val_random_state : any (default : None)
            The seed of the random state used in 'train_test_split',
            used when splitting the generated training data.
        test_size : float between 0 to 1 (default : 0.2)
            The size of the test data.
        val_size : float between 0 to 1 (default : 0.2)
            The size of the test data,
            used when splitting the generated training data.

    returns
        X_train : array
            Training data.
        X_val : array
            Validation data.
            Only returned when 'validation' is true.
        X_test : array
            Test data.
        y_train : array
            Labels for X_train.
        y_val : array
            Labels for X_val.
            Only returned when 'validation' is true.
        y_test : array
            Labels for y_test.
    """
    if not sklearn:
        raise_no_module_error('sklearn')
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=random_state, test_size=0.2)
    if validation:
        X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, random_state=val_random_state, test_size=val_size)
        return X_train, X_val, X_test, y_train, y_val, y_test
    else:
        return X_train, X_test, y_train, y_test

def encode_target(
    target,
    target_name=True
):
    """
    Encode target to one-hot vectors

    arguments
        target : array
            The true labels of the data.
        target_name : bool (default : True)
            If true, the function will return the names of the unique labels.

    returns
        onehot_targets : array
            The labels, encoded to one-hot vectors
    """
    if not sklearn:
        _raise_no_sklearn_exception()
    try:
        reshaped = target.reshape(-1, 1)
    except AttributeError:
        np_target = np.array(target)
        reshaped = np_target.reshape(-1, 1)
    
    encoder = OneHotEncoder()
    onehot_targets = encoder.fit_transform(reshaped)
    if not target_name:
        return onehot_targets
    else:
        target_names = encoder.get_feature_names()
        return onehot_targets, target_names

def plot_confusion_matrix(
    matrix,
    labels,
    save=True,
    filename='confusion_matrix.png'
):
    '''
    confusion matrix plotter

    argument :
        matrix : confusion matrix
            confusion matrix generated by
            sklearn.metrics.confusion_matix
        labels : list
            list of unique labels appear in the data
        save : boolean (default : True)
            if true, save image
        filename : str (default : 'confusion_matrix.png')
            the name of the file when saving
    '''
    if not plt:
        raise_no_module_error('matplotlib')
    if sns:
        confusion_matrix_df = pd.DataFrame(matrix, index=labels, columns=labels)
        plt.figure()
        ax = sns.heatmap(confusion_matrix_df, annot=True, cmap='Blues')

        # for matplotlib version 3.1.0 and 3.1.1
        bottom, top = ax.get_ylim()
        ax.set_ylim(bottom + 0.5, top - 0.5)

        plt.xticks(rotation=25)
        plt.ylabel('True label')
        plt.xlabel('Tredicted label')
        if save:
            plt.savefig(filename)
        plt.show()
    else:
        '''
        plot confusion matrix without using seaborn and pandas
        [code reference] https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html
        '''
        fig, ax = plt.subplots()
        im = ax.imshow(matrix, interpolation='nearest', cmap='Blues')
        ax.figure.colorbar(im, ax=ax)
        ax.set(xticks=np.arange(matrix.shape[1]),
            yticks=np.arange(matrix.shape[0]),
            xticklabels=labels, yticklabels=labels,
            ylabel='True label',
            xlabel='Predicted label')
        
        # for matplotlib version 3.1.0 and 3.1.1
        bottom, top = ax.get_ylim()
        ax.set_ylim(bottom + 0.5, top - 0.5)

        plt.setp(ax.get_xticklabels(), rotation=25, ha="right",
                rotation_mode="anchor")

        fmt = 'd'
        thresh = matrix.max() / 2.
        for i in range(matrix.shape[0]):
            for j in range(matrix.shape[1]):
                ax.text(j, i, format(matrix[i, j], fmt),
                        ha="center", va="center",
                        color="white" if matrix[i, j] > thresh else "black")
        fig.tight_layout()

        if save:
            plt.savefig(filename)
        plt.show()